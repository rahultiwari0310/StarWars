// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login renders without error 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Login {
      "_reactInternalFiber": FiberNode {
        "_debugID": 4,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 3,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "internalContextTag": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "nextEffect": null,
          "pendingProps": null,
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login"
                  >
                    <h1
                      class="login__title"
                    >
                       Login using your name and birth year to search planets
                    </h1>
                    <form
                      class="form"
                      method="post"
                    >
                      <span
                        class="error hide"
                      >
                         Invalid Username or password. 
                      </span>
                      <div
                        class="fields"
                      >
                        <input
                          class="input"
                          id="username"
                          name="username"
                          placeholder="username"
                          type="text"
                          value=""
                        />
                        <input
                          class="input"
                          id="password"
                          name="password"
                          placeholder="password"
                          type="password"
                          value=""
                        />
                      </div>
                      <p
                        class="form__button__wrapper"
                      >
                        <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />
                      </p>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "hydrate": false,
                "isReadyForCommit": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "nextCallback": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "nextCallback": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login"
                >
                  <h1
                    class="login__title"
                  >
                     Login using your name and birth year to search planets
                  </h1>
                  <form
                    class="form"
                    method="post"
                  >
                    <span
                      class="error hide"
                    >
                       Invalid Username or password. 
                    </span>
                    <div
                      class="fields"
                    >
                      <input
                        class="input"
                        id="username"
                        name="username"
                        placeholder="username"
                        type="text"
                        value=""
                      />
                      <input
                        class="input"
                        id="password"
                        name="password"
                        placeholder="password"
                        type="password"
                        value=""
                      />
                    </div>
                    <p
                      class="form__button__wrapper"
                    >
                      <input
                        class="form__button"
                        type="submit"
                        value="Login"
                      />
                    </p>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "hydrate": false,
              "isReadyForCommit": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": " Login using your name and birth year to search planets",
              "className": "login__title",
            },
            "memoizedState": null,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": [Circular],
            "sibling": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "internalContextTag": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": " Invalid Username or password. ",
                  "className": "error hide",
                },
                "memoizedState": null,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "internalContextTag": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "input",
                      "id": "username",
                      "name": "username",
                      "onChange": [Function],
                      "placeholder": "username",
                      "type": "text",
                      "value": "",
                    },
                    "memoizedState": null,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "internalContextTag": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "input",
                        "id": "password",
                        "name": "password",
                        "onChange": [Function],
                        "placeholder": "password",
                        "type": "password",
                        "value": "",
                      },
                      "memoizedState": null,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        class="input"
                        id="password"
                        name="password"
                        placeholder="password"
                        type="password"
                        value=""
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <input
                      class="input"
                      id="username"
                      name="username"
                      placeholder="username"
                      type="text"
                      value=""
                    />,
                    "tag": 5,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "internalContextTag": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <input
                        className="input"
                        id="username"
                        name="username"
                        onChange={[Function]}
                        placeholder="username"
                        type="text"
                        value=""
                      />,
                      null,
                      <input
                        className="input"
                        id="password"
                        name="password"
                        onChange={[Function]}
                        placeholder="password"
                        type="password"
                        value=""
                      />,
                    ],
                    "className": "fields",
                  },
                  "memoizedState": null,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "internalContextTag": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "form__button",
                        "type": "submit",
                        "value": "Login",
                      },
                      "memoizedState": null,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        class="form__button"
                        type="submit"
                        value="Login"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "internalContextTag": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <input
                        className="form__button"
                        type="submit"
                        value="Login"
                      />,
                      "className": "form__button__wrapper",
                    },
                    "memoizedState": null,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <p
                      class="form__button__wrapper"
                    >
                      <input
                        class="form__button"
                        type="submit"
                        value="Login"
                      />
                    </p>,
                    "tag": 5,
                    "type": "p",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="fields"
                  >
                    <input
                      class="input"
                      id="username"
                      name="username"
                      placeholder="username"
                      type="text"
                      value=""
                    />
                    <input
                      class="input"
                      id="password"
                      name="password"
                      placeholder="password"
                      type="password"
                      value=""
                    />
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <span
                  class="error hide"
                >
                   Invalid Username or password. 
                </span>,
                "tag": 5,
                "type": "span",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 1,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <span
                    className="error hide"
                  >
                     Invalid Username or password. 
                  </span>,
                  <div
                    className="fields"
                  >
                    <input
                      className="input"
                      id="username"
                      name="username"
                      onChange={[Function]}
                      placeholder="username"
                      type="text"
                      value=""
                    />
                    <input
                      className="input"
                      id="password"
                      name="password"
                      onChange={[Function]}
                      placeholder="password"
                      type="password"
                      value=""
                    />
                  </div>,
                  <p
                    className="form__button__wrapper"
                  >
                    <input
                      className="form__button"
                      type="submit"
                      value="Login"
                    />
                  </p>,
                ],
                "className": "form",
                "method": "post",
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form
                class="form"
                method="post"
              >
                <span
                  class="error hide"
                >
                   Invalid Username or password. 
                </span>
                <div
                  class="fields"
                >
                  <input
                    class="input"
                    id="username"
                    name="username"
                    placeholder="username"
                    type="text"
                    value=""
                  />
                  <input
                    class="input"
                    id="password"
                    name="password"
                    placeholder="password"
                    type="password"
                    value=""
                  />
                </div>
                <p
                  class="form__button__wrapper"
                >
                  <input
                    class="form__button"
                    type="submit"
                    value="Login"
                  />
                </p>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "stateNode": <h1
              class="login__title"
            >
               Login using your name and birth year to search planets
            </h1>,
            "tag": 5,
            "type": "h1",
            "updateQueue": null,
          },
          "effectTag": 0,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "internalContextTag": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": Array [
              <h1
                className="login__title"
              >
                 Login using your name and birth year to search planets
              </h1>,
              <form
                className="form"
                method="post"
                onSubmit={[Function]}
              >
                <span
                  className="error hide"
                >
                   Invalid Username or password. 
                </span>
                <div
                  className="fields"
                >
                  <input
                    className="input"
                    id="username"
                    name="username"
                    onChange={[Function]}
                    placeholder="username"
                    type="text"
                    value=""
                  />
                  <input
                    className="input"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    type="password"
                    value=""
                  />
                </div>
                <p
                  className="form__button__wrapper"
                >
                  <input
                    className="form__button"
                    type="submit"
                    value="Login"
                  />
                </p>
              </form>,
            ],
            "className": "login",
          },
          "memoizedState": null,
          "nextEffect": null,
          "pendingProps": null,
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": <div
            class="login"
          >
            <h1
              class="login__title"
            >
               Login using your name and birth year to search planets
            </h1>
            <form
              class="form"
              method="post"
            >
              <span
                class="error hide"
              >
                 Invalid Username or password. 
              </span>
              <div
                class="fields"
              >
                <input
                  class="input"
                  id="username"
                  name="username"
                  placeholder="username"
                  type="text"
                  value=""
                />
                <input
                  class="input"
                  id="password"
                  name="password"
                  placeholder="password"
                  type="password"
                  value=""
                />
              </div>
              <p
                class="form__button__wrapper"
              >
                <input
                  class="form__button"
                  type="submit"
                  value="Login"
                />
              </p>
            </form>
          </div>,
          "tag": 5,
          "type": "div",
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "internalContextTag": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {},
        "memoizedState": Object {
          "isDirty": false,
          "isValidating": false,
          "passwordEntered": "",
          "usernameEntered": "",
        },
        "nextEffect": null,
        "pendingProps": null,
        "ref": null,
        "return": FiberNode {
          "_debugID": 3,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "internalContextTag": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {},
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {},
          },
          "nextEffect": null,
          "pendingProps": null,
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login"
                  >
                    <h1
                      class="login__title"
                    >
                       Login using your name and birth year to search planets
                    </h1>
                    <form
                      class="form"
                      method="post"
                    >
                      <span
                        class="error hide"
                      >
                         Invalid Username or password. 
                      </span>
                      <div
                        class="fields"
                      >
                        <input
                          class="input"
                          id="username"
                          name="username"
                          placeholder="username"
                          type="text"
                          value=""
                        />
                        <input
                          class="input"
                          id="password"
                          name="password"
                          placeholder="password"
                          type="password"
                          value=""
                        />
                      </div>
                      <p
                        class="form__button__wrapper"
                      >
                        <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />
                      </p>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "hydrate": false,
                "isReadyForCommit": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "nextCallback": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "nextCallback": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={Object {}}
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={Object {}}
              />,
            },
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login"
                >
                  <h1
                    class="login__title"
                  >
                     Login using your name and birth year to search planets
                  </h1>
                  <form
                    class="form"
                    method="post"
                  >
                    <span
                      class="error hide"
                    >
                       Invalid Username or password. 
                    </span>
                    <div
                      class="fields"
                    >
                      <input
                        class="input"
                        id="username"
                        name="username"
                        placeholder="username"
                        type="text"
                        value=""
                      />
                      <input
                        class="input"
                        id="password"
                        name="password"
                        placeholder="password"
                        type="password"
                        value=""
                      />
                    </div>
                    <p
                      class="form__button__wrapper"
                    >
                      <input
                        class="form__button"
                        type="submit"
                        value="Login"
                      />
                    </p>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "hydrate": false,
              "isReadyForCommit": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "data": Object {
        "loggedInUser": "",
      },
      "handleSubmit": [Function],
      "onInputChange": [Function],
      "props": Object {},
      "refs": Object {},
      "state": Object {
        "isDirty": false,
        "isValidating": false,
        "passwordEntered": "",
        "usernameEntered": "",
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="login"
      >
        <h1
          class="login__title"
        >
           Login using your name and birth year to search planets
        </h1>
        <form
          class="form"
          method="post"
        >
          <span
            class="error hide"
          >
             Invalid Username or password. 
          </span>
          <div
            class="fields"
          >
            <input
              class="input"
              id="username"
              name="username"
              placeholder="username"
              type="text"
              value=""
            />
            <input
              class="input"
              id="password"
              name="password"
              placeholder="password"
              type="password"
              value=""
            />
          </div>
          <p
            class="form__button__wrapper"
          >
            <input
              class="form__button"
              type="submit"
              value="Login"
            />
          </p>
        </form>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="login__title"
          >
             Login using your name and birth year to search planets
          </h1>,
          <form
            className="form"
            method="post"
            onSubmit={[Function]}
          >
            <span
              className="error hide"
            >
               Invalid Username or password. 
            </span>
            <div
              className="fields"
            >
              <input
                className="input"
                id="username"
                name="username"
                onChange={[Function]}
                placeholder="username"
                type="text"
                value=""
              />
              <input
                className="input"
                id="password"
                name="password"
                onChange={[Function]}
                placeholder="password"
                type="password"
                value=""
              />
            </div>
            <p
              className="form__button__wrapper"
            >
              <input
                className="form__button"
                type="submit"
                value="Login"
              />
            </p>
          </form>,
        ],
        "className": "login",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <h1
            class="login__title"
          >
             Login using your name and birth year to search planets
          </h1>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " Login using your name and birth year to search planets",
            "className": "login__title",
          },
          "ref": null,
          "rendered": Array [
            " Login using your name and birth year to search planets",
          ],
          "type": "h1",
        },
        Object {
          "instance": <form
            class="form"
            method="post"
          >
            <span
              class="error hide"
            >
               Invalid Username or password. 
            </span>
            <div
              class="fields"
            >
              <input
                class="input"
                id="username"
                name="username"
                placeholder="username"
                type="text"
                value=""
              />
              <input
                class="input"
                id="password"
                name="password"
                placeholder="password"
                type="password"
                value=""
              />
            </div>
            <p
              class="form__button__wrapper"
            >
              <input
                class="form__button"
                type="submit"
                value="Login"
              />
            </p>
          </form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="error hide"
              >
                 Invalid Username or password. 
              </span>,
              <div
                className="fields"
              >
                <input
                  className="input"
                  id="username"
                  name="username"
                  onChange={[Function]}
                  placeholder="username"
                  type="text"
                  value=""
                />
                <input
                  className="input"
                  id="password"
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  type="password"
                  value=""
                />
              </div>,
              <p
                className="form__button__wrapper"
              >
                <input
                  className="form__button"
                  type="submit"
                  value="Login"
                />
              </p>,
            ],
            "className": "form",
            "method": "post",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <span
                class="error hide"
              >
                 Invalid Username or password. 
              </span>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": " Invalid Username or password. ",
                "className": "error hide",
              },
              "ref": null,
              "rendered": Array [
                " Invalid Username or password. ",
              ],
              "type": "span",
            },
            Object {
              "instance": <div
                class="fields"
              >
                <input
                  class="input"
                  id="username"
                  name="username"
                  placeholder="username"
                  type="text"
                  value=""
                />
                <input
                  class="input"
                  id="password"
                  name="password"
                  placeholder="password"
                  type="password"
                  value=""
                />
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="input"
                    id="username"
                    name="username"
                    onChange={[Function]}
                    placeholder="username"
                    type="text"
                    value=""
                  />,
                  null,
                  <input
                    className="input"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    type="password"
                    value=""
                  />,
                ],
                "className": "fields",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    class="input"
                    id="username"
                    name="username"
                    placeholder="username"
                    type="text"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "input",
                    "id": "username",
                    "name": "username",
                    "onChange": [Function],
                    "placeholder": "username",
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
                Object {
                  "instance": <input
                    class="input"
                    id="password"
                    name="password"
                    placeholder="password"
                    type="password"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "input",
                    "id": "password",
                    "name": "password",
                    "onChange": [Function],
                    "placeholder": "password",
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <p
                class="form__button__wrapper"
              >
                <input
                  class="form__button"
                  type="submit"
                  value="Login"
                />
              </p>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <input
                  className="form__button"
                  type="submit"
                  value="Login"
                />,
                "className": "form__button__wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    class="form__button"
                    type="submit"
                    value="Login"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "form__button",
                    "type": "submit",
                    "value": "Login",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": "p",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Login {
        "_reactInternalFiber": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 3,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "internalContextTag": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login"
                    >
                      <h1
                        class="login__title"
                      >
                         Login using your name and birth year to search planets
                      </h1>
                      <form
                        class="form"
                        method="post"
                      >
                        <span
                          class="error hide"
                        >
                           Invalid Username or password. 
                        </span>
                        <div
                          class="fields"
                        >
                          <input
                            class="input"
                            id="username"
                            name="username"
                            placeholder="username"
                            type="text"
                            value=""
                          />
                          <input
                            class="input"
                            id="password"
                            name="password"
                            placeholder="password"
                            type="password"
                            value=""
                          />
                        </div>
                        <p
                          class="form__button__wrapper"
                        >
                          <input
                            class="form__button"
                            type="submit"
                            value="Login"
                          />
                        </p>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "hydrate": false,
                  "isReadyForCommit": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "nextCallback": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "nextCallback": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login"
                  >
                    <h1
                      class="login__title"
                    >
                       Login using your name and birth year to search planets
                    </h1>
                    <form
                      class="form"
                      method="post"
                    >
                      <span
                        class="error hide"
                      >
                         Invalid Username or password. 
                      </span>
                      <div
                        class="fields"
                      >
                        <input
                          class="input"
                          id="username"
                          name="username"
                          placeholder="username"
                          type="text"
                          value=""
                        />
                        <input
                          class="input"
                          id="password"
                          name="password"
                          placeholder="password"
                          type="password"
                          value=""
                        />
                      </div>
                      <p
                        class="form__button__wrapper"
                      >
                        <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />
                      </p>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "hydrate": false,
                "isReadyForCommit": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": " Login using your name and birth year to search planets",
                "className": "login__title",
              },
              "memoizedState": null,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": [Circular],
              "sibling": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "internalContextTag": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": " Invalid Username or password. ",
                    "className": "error hide",
                  },
                  "memoizedState": null,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "internalContextTag": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "input",
                        "id": "username",
                        "name": "username",
                        "onChange": [Function],
                        "placeholder": "username",
                        "type": "text",
                        "value": "",
                      },
                      "memoizedState": null,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 12,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "internalContextTag": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "input",
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "placeholder": "password",
                          "type": "password",
                          "value": "",
                        },
                        "memoizedState": null,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          class="input"
                          id="password"
                          name="password"
                          placeholder="password"
                          type="password"
                          value=""
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <input
                        class="input"
                        id="username"
                        name="username"
                        placeholder="username"
                        type="text"
                        value=""
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "internalContextTag": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <input
                          className="input"
                          id="username"
                          name="username"
                          onChange={[Function]}
                          placeholder="username"
                          type="text"
                          value=""
                        />,
                        null,
                        <input
                          className="input"
                          id="password"
                          name="password"
                          onChange={[Function]}
                          placeholder="password"
                          type="password"
                          value=""
                        />,
                      ],
                      "className": "fields",
                    },
                    "memoizedState": null,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "internalContextTag": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "form__button",
                          "type": "submit",
                          "value": "Login",
                        },
                        "memoizedState": null,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "internalContextTag": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <input
                          className="form__button"
                          type="submit"
                          value="Login"
                        />,
                        "className": "form__button__wrapper",
                      },
                      "memoizedState": null,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <p
                        class="form__button__wrapper"
                      >
                        <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />
                      </p>,
                      "tag": 5,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="fields"
                    >
                      <input
                        class="input"
                        id="username"
                        name="username"
                        placeholder="username"
                        type="text"
                        value=""
                      />
                      <input
                        class="input"
                        id="password"
                        name="password"
                        placeholder="password"
                        type="password"
                        value=""
                      />
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <span
                    class="error hide"
                  >
                     Invalid Username or password. 
                  </span>,
                  "tag": 5,
                  "type": "span",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "internalContextTag": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <span
                      className="error hide"
                    >
                       Invalid Username or password. 
                    </span>,
                    <div
                      className="fields"
                    >
                      <input
                        className="input"
                        id="username"
                        name="username"
                        onChange={[Function]}
                        placeholder="username"
                        type="text"
                        value=""
                      />
                      <input
                        className="input"
                        id="password"
                        name="password"
                        onChange={[Function]}
                        placeholder="password"
                        type="password"
                        value=""
                      />
                    </div>,
                    <p
                      className="form__button__wrapper"
                    >
                      <input
                        className="form__button"
                        type="submit"
                        value="Login"
                      />
                    </p>,
                  ],
                  "className": "form",
                  "method": "post",
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form
                  class="form"
                  method="post"
                >
                  <span
                    class="error hide"
                  >
                     Invalid Username or password. 
                  </span>
                  <div
                    class="fields"
                  >
                    <input
                      class="input"
                      id="username"
                      name="username"
                      placeholder="username"
                      type="text"
                      value=""
                    />
                    <input
                      class="input"
                      id="password"
                      name="password"
                      placeholder="password"
                      type="password"
                      value=""
                    />
                  </div>
                  <p
                    class="form__button__wrapper"
                  >
                    <input
                      class="form__button"
                      type="submit"
                      value="Login"
                    />
                  </p>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "stateNode": <h1
                class="login__title"
              >
                 Login using your name and birth year to search planets
              </h1>,
              "tag": 5,
              "type": "h1",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <h1
                  className="login__title"
                >
                   Login using your name and birth year to search planets
                </h1>,
                <form
                  className="form"
                  method="post"
                  onSubmit={[Function]}
                >
                  <span
                    className="error hide"
                  >
                     Invalid Username or password. 
                  </span>
                  <div
                    className="fields"
                  >
                    <input
                      className="input"
                      id="username"
                      name="username"
                      onChange={[Function]}
                      placeholder="username"
                      type="text"
                      value=""
                    />
                    <input
                      className="input"
                      id="password"
                      name="password"
                      onChange={[Function]}
                      placeholder="password"
                      type="password"
                      value=""
                    />
                  </div>
                  <p
                    className="form__button__wrapper"
                  >
                    <input
                      className="form__button"
                      type="submit"
                      value="Login"
                    />
                  </p>
                </form>,
              ],
              "className": "login",
            },
            "memoizedState": null,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": <div
              class="login"
            >
              <h1
                class="login__title"
              >
                 Login using your name and birth year to search planets
              </h1>
              <form
                class="form"
                method="post"
              >
                <span
                  class="error hide"
                >
                   Invalid Username or password. 
                </span>
                <div
                  class="fields"
                >
                  <input
                    class="input"
                    id="username"
                    name="username"
                    placeholder="username"
                    type="text"
                    value=""
                  />
                  <input
                    class="input"
                    id="password"
                    name="password"
                    placeholder="password"
                    type="password"
                    value=""
                  />
                </div>
                <p
                  class="form__button__wrapper"
                >
                  <input
                    class="form__button"
                    type="submit"
                    value="Login"
                  />
                </p>
              </form>
            </div>,
            "tag": 5,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "internalContextTag": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": Object {
            "isDirty": false,
            "isValidating": false,
            "passwordEntered": "",
            "usernameEntered": "",
          },
          "nextEffect": null,
          "pendingProps": null,
          "ref": null,
          "return": FiberNode {
            "_debugID": 3,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "internalContextTag": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {},
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {},
            },
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "internalContextTag": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login"
                    >
                      <h1
                        class="login__title"
                      >
                         Login using your name and birth year to search planets
                      </h1>
                      <form
                        class="form"
                        method="post"
                      >
                        <span
                          class="error hide"
                        >
                           Invalid Username or password. 
                        </span>
                        <div
                          class="fields"
                        >
                          <input
                            class="input"
                            id="username"
                            name="username"
                            placeholder="username"
                            type="text"
                            value=""
                          />
                          <input
                            class="input"
                            id="password"
                            name="password"
                            placeholder="password"
                            type="password"
                            value=""
                          />
                        </div>
                        <p
                          class="form__button__wrapper"
                        >
                          <input
                            class="form__button"
                            type="submit"
                            value="Login"
                          />
                        </p>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "hydrate": false,
                  "isReadyForCommit": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "nextCallback": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "nextCallback": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={Object {}}
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "internalContextTag": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={Object {}}
                />,
              },
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login"
                  >
                    <h1
                      class="login__title"
                    >
                       Login using your name and birth year to search planets
                    </h1>
                    <form
                      class="form"
                      method="post"
                    >
                      <span
                        class="error hide"
                      >
                         Invalid Username or password. 
                      </span>
                      <div
                        class="fields"
                      >
                        <input
                          class="input"
                          id="username"
                          name="username"
                          placeholder="username"
                          type="text"
                          value=""
                        />
                        <input
                          class="input"
                          id="password"
                          name="password"
                          placeholder="password"
                          type="password"
                          value=""
                        />
                      </div>
                      <p
                        class="form__button__wrapper"
                      >
                        <input
                          class="form__button"
                          type="submit"
                          value="Login"
                        />
                      </p>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "hydrate": false,
                "isReadyForCommit": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {},
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {},
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "data": Object {
          "loggedInUser": "",
        },
        "handleSubmit": [Function],
        "onInputChange": [Function],
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "isDirty": false,
          "isValidating": false,
          "passwordEntered": "",
          "usernameEntered": "",
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="login"
        >
          <h1
            class="login__title"
          >
             Login using your name and birth year to search planets
          </h1>
          <form
            class="form"
            method="post"
          >
            <span
              class="error hide"
            >
               Invalid Username or password. 
            </span>
            <div
              class="fields"
            >
              <input
                class="input"
                id="username"
                name="username"
                placeholder="username"
                type="text"
                value=""
              />
              <input
                class="input"
                id="password"
                name="password"
                placeholder="password"
                type="password"
                value=""
              />
            </div>
            <p
              class="form__button__wrapper"
            >
              <input
                class="form__button"
                type="submit"
                value="Login"
              />
            </p>
          </form>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="login__title"
            >
               Login using your name and birth year to search planets
            </h1>,
            <form
              className="form"
              method="post"
              onSubmit={[Function]}
            >
              <span
                className="error hide"
              >
                 Invalid Username or password. 
              </span>
              <div
                className="fields"
              >
                <input
                  className="input"
                  id="username"
                  name="username"
                  onChange={[Function]}
                  placeholder="username"
                  type="text"
                  value=""
                />
                <input
                  className="input"
                  id="password"
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  type="password"
                  value=""
                />
              </div>
              <p
                className="form__button__wrapper"
              >
                <input
                  className="form__button"
                  type="submit"
                  value="Login"
                />
              </p>
            </form>,
          ],
          "className": "login",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <h1
              class="login__title"
            >
               Login using your name and birth year to search planets
            </h1>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": " Login using your name and birth year to search planets",
              "className": "login__title",
            },
            "ref": null,
            "rendered": Array [
              " Login using your name and birth year to search planets",
            ],
            "type": "h1",
          },
          Object {
            "instance": <form
              class="form"
              method="post"
            >
              <span
                class="error hide"
              >
                 Invalid Username or password. 
              </span>
              <div
                class="fields"
              >
                <input
                  class="input"
                  id="username"
                  name="username"
                  placeholder="username"
                  type="text"
                  value=""
                />
                <input
                  class="input"
                  id="password"
                  name="password"
                  placeholder="password"
                  type="password"
                  value=""
                />
              </div>
              <p
                class="form__button__wrapper"
              >
                <input
                  class="form__button"
                  type="submit"
                  value="Login"
                />
              </p>
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="error hide"
                >
                   Invalid Username or password. 
                </span>,
                <div
                  className="fields"
                >
                  <input
                    className="input"
                    id="username"
                    name="username"
                    onChange={[Function]}
                    placeholder="username"
                    type="text"
                    value=""
                  />
                  <input
                    className="input"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    type="password"
                    value=""
                  />
                </div>,
                <p
                  className="form__button__wrapper"
                >
                  <input
                    className="form__button"
                    type="submit"
                    value="Login"
                  />
                </p>,
              ],
              "className": "form",
              "method": "post",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <span
                  class="error hide"
                >
                   Invalid Username or password. 
                </span>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": " Invalid Username or password. ",
                  "className": "error hide",
                },
                "ref": null,
                "rendered": Array [
                  " Invalid Username or password. ",
                ],
                "type": "span",
              },
              Object {
                "instance": <div
                  class="fields"
                >
                  <input
                    class="input"
                    id="username"
                    name="username"
                    placeholder="username"
                    type="text"
                    value=""
                  />
                  <input
                    class="input"
                    id="password"
                    name="password"
                    placeholder="password"
                    type="password"
                    value=""
                  />
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <input
                      className="input"
                      id="username"
                      name="username"
                      onChange={[Function]}
                      placeholder="username"
                      type="text"
                      value=""
                    />,
                    null,
                    <input
                      className="input"
                      id="password"
                      name="password"
                      onChange={[Function]}
                      placeholder="password"
                      type="password"
                      value=""
                    />,
                  ],
                  "className": "fields",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <input
                      class="input"
                      id="username"
                      name="username"
                      placeholder="username"
                      type="text"
                      value=""
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "input",
                      "id": "username",
                      "name": "username",
                      "onChange": [Function],
                      "placeholder": "username",
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                  Object {
                    "instance": <input
                      class="input"
                      id="password"
                      name="password"
                      placeholder="password"
                      type="password"
                      value=""
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "input",
                      "id": "password",
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "password",
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <p
                  class="form__button__wrapper"
                >
                  <input
                    class="form__button"
                    type="submit"
                    value="Login"
                  />
                </p>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="form__button"
                    type="submit"
                    value="Login"
                  />,
                  "className": "form__button__wrapper",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <input
                      class="form__button"
                      type="submit"
                      value="Login"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "form__button",
                      "type": "submit",
                      "value": "Login",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": "p",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
